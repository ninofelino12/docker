export { config } from "./config";
export { toggler } from "./toggler";
export { createBlock } from "./block_compiler";
export { list } from "./list";
export { multi } from "./multi";
export { text, comment } from "./text";
export { html } from "./html";
export { createCatcher } from "./event_catcher";
export interface VNode<T = any> {
    mount(parent: HTMLElement, afterNode: Node | null): void;
    moveBeforeDOMNode(node: Node | null, parent?: HTMLElement): void;
    moveBeforeVNode(other: T | null, afterNode: Node | null): void;
    patch(other: T, withBeforeRemove: boolean): void;
    beforeRemove(): void;
    remove(): void;
    firstNode(): Node | undefined;
    el?: undefined | HTMLElement | Text;
    parentEl?: undefined | HTMLElement;
    isOnlyChild?: boolean | undefined;
    key?: any;
}
export declare type BDom = VNode<any>;
export declare function mount(vnode: VNode, fixture: HTMLElement, afterNode?: Node | null): void;
export declare function patch(vnode1: VNode, vnode2: VNode, withBeforeRemove?: boolean): void;
export declare function remove(vnode: VNode, withBeforeRemove?: boolean): void;
export declare function withKey(vnode: VNode, key: any): VNode<any>;
