import { createBlock, html, list, mount as blockMount, multi, patch, remove, text, toggler, comment } from "./blockdom";
export declare const blockDom: {
    config: {
        shouldNormalizeDom: boolean;
        mainEventHandler: (data: any, ev: Event, currentTarget?: EventTarget | null | undefined) => boolean;
    };
    mount: typeof blockMount;
    patch: typeof patch;
    remove: typeof remove;
    list: typeof list;
    multi: typeof multi;
    text: typeof text;
    toggler: typeof toggler;
    createBlock: typeof createBlock;
    html: typeof html;
    comment: typeof comment;
};
export { App, mount } from "./app";
export { xml } from "./template_set";
export { Component } from "./component";
export type { ComponentConstructor } from "./component";
export { useComponent, useState } from "./component_node";
export { status } from "./status";
export { reactive, markRaw, toRaw } from "./reactivity";
export { useEffect, useEnv, useExternalListener, useRef, useChildSubEnv, useSubEnv } from "./hooks";
export { EventBus, whenReady, loadFile, markup } from "./utils";
export { onWillStart, onMounted, onWillUnmount, onWillUpdateProps, onWillPatch, onPatched, onWillRender, onRendered, onWillDestroy, onError, } from "./lifecycle_hooks";
export { validate, validateType } from "./validation";
export { OwlError } from "../common/owl_error";
export declare const __info__: {
    version: string;
};
