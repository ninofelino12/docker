import { Schema } from "./validation";
import type { ComponentNode } from "./component_node";
export declare type Props = {
    [key: string]: any;
};
interface StaticComponentProperties {
    template: string;
    defaultProps?: any;
    props?: Schema;
    components?: {
        [componentName: string]: ComponentConstructor;
    };
}
export declare type ComponentConstructor<P extends Props = any, E = any> = (new (props: P, env: E, node: ComponentNode) => Component<P, E>) & StaticComponentProperties;
export declare class Component<Props = any, Env = any> {
    static template: string;
    static props?: Schema;
    static defaultProps?: any;
    props: Props;
    env: Env;
    __owl__: ComponentNode;
    constructor(props: Props, env: Env, node: ComponentNode);
    setup(): void;
    render(deep?: boolean): void;
}
export {};
