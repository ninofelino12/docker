import { Component, ComponentConstructor, Props } from "./component";
import { ComponentNode } from "./component_node";
import { handleError } from "./error_handling";
import { Fiber, RootFiber, MountOptions } from "./fibers";
import { Scheduler } from "./scheduler";
import { TemplateSet, TemplateSetConfig } from "./template_set";
import { validateTarget } from "./utils";
import { toRaw, reactive } from "./reactivity";
export interface Env {
    [key: string]: any;
}
export interface AppConfig<P, E> extends TemplateSetConfig {
    name?: string;
    props?: P;
    env?: E;
    test?: boolean;
    warnIfNoStaticProps?: boolean;
}
export declare const DEV_MSG: () => string;
declare global {
    interface Window {
        __OWL_DEVTOOLS__: {
            apps: Set<App>;
            Fiber: typeof Fiber;
            RootFiber: typeof RootFiber;
            toRaw: typeof toRaw;
            reactive: typeof reactive;
        };
    }
}
export declare class App<T extends abstract new (...args: any) => any = any, P extends object = any, E = any> extends TemplateSet {
    static validateTarget: typeof validateTarget;
    static apps: Set<App<any, any, any>>;
    static version: string;
    name: string;
    Root: ComponentConstructor<P, E>;
    props: P;
    env: E;
    scheduler: Scheduler;
    root: ComponentNode<P, E> | null;
    warnIfNoStaticProps: boolean;
    constructor(Root: ComponentConstructor<P, E>, config?: AppConfig<P, E>);
    mount(target: HTMLElement | ShadowRoot, options?: MountOptions): Promise<Component<P, E> & InstanceType<T>>;
    makeNode(Component: ComponentConstructor, props: any): ComponentNode;
    mountNode(node: ComponentNode, target: HTMLElement | ShadowRoot, options?: MountOptions): any;
    destroy(): void;
    createComponent<P extends Props>(name: string | null, isStatic: boolean, hasSlotsProp: boolean, hasDynamicPropList: boolean, propList: string[]): (props: P, key: string, ctx: ComponentNode, parent: any, C: any) => any;
    handleError(...args: Parameters<typeof handleError>): void;
}
export declare function mount<T extends abstract new (...args: any) => any = any, P extends object = any, E = any>(C: T & ComponentConstructor<P, E>, target: HTMLElement, config?: AppConfig<P, E> & MountOptions): Promise<Component<P, E> & InstanceType<T>>;
